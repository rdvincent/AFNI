# This project is designed to be built outside the source tree.
# File generated by Simon K. Warfield simon.warfield@childrens.harvard.edu
# with support from NIH grant RR021885.
PROJECT(gifticlib)
cmake_minimum_required(VERSION 2.6)

# install destinations
SET(GIFTI_INSTALL_BIN_DIR "${CMAKE_INSTALL_PREFIX}/bin")
SET(GIFTI_INSTALL_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib")
SET(GIFTI_INSTALL_INCLUDE_DIR "${CMAKE_INSTALL_PREFIX}/include/gifti")

# add option to build shared libraries. The default is OFF.

OPTION( BUILD_SHARED_LIBS "Toggle building shared libraries" OFF)
OPTION( USE_NIFTI_VERSION_1 "Use NIfTI-1 library instead of NIfTI-2" OFF)

IF(USE_NIFTI_VERSION_1)
  add_definitions(-DUSE_NIFTI_VERSION_1)
ENDIF(USE_NIFTI_VERSION_1)

FIND_PACKAGE(ITK)
IF(ITK_FOUND)
# ITK provides expat and zlib.
   INCLUDE(${ITK_USE_FILE})
   SET(EXPAT_LIBRARIES ITKEXPAT)
   SET(ZLIB_LIBRARIES ITKznz)
   SET(NIFTI_LIBRARIES ITKniftiio)
ELSE(ITK_FOUND)
# Otherwise, get it from elsewhere.
  FIND_PACKAGE(EXPAT)
  FIND_PACKAGE(ZLIB)
  FIND_LIBRARY(ZNZ_LIBRARY NAMES libznz znz PATHS /usr/lib /usr/local/lib )
  FIND_LIBRARY(NIFTI_LIBRARY NAMES niftiio PATHS /usr/lib /usr/local/lib )
  FIND_PATH(NIFTI_INCLUDE_DIR nifti1_io.h /usr/local/include/nifti
    /usr/include/nifti)
  SET(NIFTI_LIBRARIES ${NIFTI_LIBRARY} ${ZNZ_LIBRARY} m)
  INCLUDE_DIRECTORIES(${NIFTI_INCLUDE_DIR})
ENDIF(ITK_FOUND)

# shared library API versioning -- NOT the same as the release version
SET(GIFTI_SHAREDLIB_VERSION "0.0.0")
STRING( REGEX MATCH "^[0-9]+" GIFTI_SHAREDLIB_SOVERSION ${GIFTI_SHAREDLIB_VERSION})
# Set library version when building shared libs.
SET(GIFTI_LIBRARY_PROPERTIES VERSION ${GIFTI_SHAREDLIB_VERSION} SOVERSION ${GIFTI_SHAREDLIB_SOVERSION})

IF(ZLIB_FOUND)
  ADD_DEFINITIONS(-DHAVE_ZLIB)
ENDIF(ZLIB_FOUND)

INCLUDE_DIRECTORIES(
${CRKIT_SOURCE_DIR}/External
${gifticlib_SOURCE_DIR}
${gifticlib_BINARY_DIR}
)

SET(GIFTIIO_SRC gifti_io.c gifti_xml.c)

# shared version
IF (BUILD_SHARED_LIBS)
  ADD_LIBRARY(giftiio SHARED ${GIFTIIO_SRC})
  SET_TARGET_PROPERTIES(giftiio PROPERTIES ${GIFTI_LIBRARY_PROPERTIES})
  TARGET_LINK_LIBRARIES(giftiio ${EXPAT_LIBRARIES} ${NIFTI_LIBRARIES})
  IF(ZLIB_FOUND)
    TARGET_LINK_LIBRARIES(giftiio ${ZLIB_LIBRARIES})
  ENDIF(ZLIB_FOUND)
ENDIF (BUILD_SHARED_LIBS)

# static version
ADD_LIBRARY(giftiio_static STATIC ${GIFTIIO_SRC})
#The library target "via_static" has a default OUTPUT_NAME of "via_static", can be changed with
SET_TARGET_PROPERTIES(giftiio_static PROPERTIES ${GIFTI_LIBRARY_PROPERTIES} OUTPUT_NAME "giftiio")

#LINK_DIRECTORIES(${gifticlib_BINARY_DIR})

ADD_EXECUTABLE(gifti_tool gifti_tool.c)
TARGET_LINK_LIBRARIES(gifti_tool giftiio_static ${EXPAT_LIBRARIES} ${NIFTI_LIBRARIES})
IF(ZLIB_FOUND)
  TARGET_LINK_LIBRARIES(gifti_tool ${ZLIB_LIBRARIES})
ENDIF(ZLIB_FOUND)

ADD_EXECUTABLE(gifti_test gifti_test.c)
TARGET_LINK_LIBRARIES(gifti_test giftiio_static ${EXPAT_LIBRARIES} ${NIFTI_LIBRARIES})
IF(ZLIB_FOUND)
  TARGET_LINK_LIBRARIES(gifti_test ${ZLIB_LIBRARIES})
ENDIF(ZLIB_FOUND)

# binaries
IF (BUILD_SHARED_LIBS)
  INSTALL(TARGETS giftiio giftiio_static gifti_tool gifti_test
    RUNTIME DESTINATION ${GIFTI_INSTALL_BIN_DIR} COMPONENT RuntimeLibraries
    LIBRARY DESTINATION ${GIFTI_INSTALL_LIB_DIR} COMPONENT RuntimeLibraries
    ARCHIVE DESTINATION ${GIFTI_INSTALL_LIB_DIR} COMPONENT Development)
ELSE (BUILD_SHARED_LIBS)
  INSTALL(TARGETS giftiio_static gifti_tool gifti_test
    RUNTIME DESTINATION ${GIFTI_INSTALL_BIN_DIR} COMPONENT RuntimeLibraries
    LIBRARY DESTINATION ${GIFTI_INSTALL_LIB_DIR} COMPONENT RuntimeLibraries
    ARCHIVE DESTINATION ${GIFTI_INSTALL_LIB_DIR} COMPONENT Development)
ENDIF (BUILD_SHARED_LIBS)

# headers
INSTALL(FILES gifti_io.h gifti_xml.h
    DESTINATION ${GIFTI_INSTALL_INCLUDE_DIR}
    COMPONENT Development)

SET(GIFTI_PACKAGE_VERSION_MAJOR 1)
SET(GIFTI_PACKAGE_VERSION_MINOR 0)
SET(GIFTI_PACKAGE_VERSION_PATCH 15)
SET(GIFTI_RELEASE_DATE "20160301")
SET(CPACK_PACKAGE_NAME "gifticlib")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "GIfTI file format library")
SET(CPACK_PACKAGE_VENDOR "NIMH Neuroinformatics Technology Initiative")
SET(CPACK_PACKAGE_VERSION_MAJOR ${GIFTI_PACKAGE_VERSION_MAJOR})
SET(CPACK_PACKAGE_VERSION_MINOR ${GIFTI_PACKAGE_VERSION_MINOR})
SET(CPACK_PACKAGE_VERSION_PATCH ${GIFTI_PACKAGE_VERSION_PATCH})
SET(CPACK_PACKAGE_CONTACT "Robert D. Vincent <robert.d.vincent@mcgill.ca>")
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "gifti-${GIFTI_VERSION_FULL}")
SET(CPACK_MONOLITHIC_INSTALL ON)
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_SOURCE_DIR}/README.gifti")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/LICENSE.gifti")
SET(CPACK_PACKAGE_RELOCATABLE OFF)
SET(CPACK_PACKAGE_FILE_NAME "gifti-${GIFTI_VERSION_FULL}")
INCLUDE(CPack)
